var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};

// src/index.ts
import { promises as fs } from "fs";
import { resolve } from "path";
import chokidar from "chokidar";
var defaultOptions = {
  storeDir: "src/store",
  excludes: ["index"],
  outputFile: "src/helper/pinia-auto-refs.ts",
  isDev: false
};
function src_default(options = {}) {
  options = __spreadValues(__spreadValues({}, defaultOptions), options);
  const { storeDir, excludes, outputFile, isDev } = options;
  const storePath = resolve(process.cwd(), storeDir);
  const outputDir = outputFile.replace(/(\/[^/]*).ts/, "");
  fs.readdir(outputDir).catch(() => fs.mkdir(outputDir));
  async function generateConfigFiles() {
    const storesPath = await fs.readdir(storePath);
    const storeNames = storesPath.filter((i) => i.endsWith(".ts")).map((i) => i.replace(".ts", "")).filter((i) => !excludes.includes(i));
    const ctx = `// "https://github.com/Allen-1998/pinia-auto-refs"
/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
import type { AutoToRefs, ToRef } from 'vue'

${storeNames.reduce((str, storeName) => `${str}import ${storeName}Store from '${storeDir.replace("src", "@")}/${storeName}'
`, "")}
import store from '${storeDir.replace("src", "@")}'

declare module 'vue' {
  export type AutoToRefs<T> = {
    [K in keyof T]: T[K] extends Function ? T[K] : ToRef<T[K]>
  }
}

const storeExports = {
${storeNames.reduce((str, storeName) => `${str}  ${storeName}: ${storeName}Store,
`, "")}}

export function useStore<T extends keyof typeof storeExports>(storeName: T) {
  const targetStore = storeExports[storeName](store)
  const storeRefs = storeToRefs(targetStore)
  return { ...targetStore, ...storeRefs } as unknown as AutoToRefs<ReturnType<typeof storeExports[T]>>
}
`;
    fs.writeFile(outputFile, ctx, "utf-8");
  }
  generateConfigFiles();
  if (process.env.NODE_ENV === "development" || isDev) {
    const watcher = chokidar.watch(storePath);
    watcher.on("add", () => generateConfigFiles());
    watcher.on("unlink", () => generateConfigFiles());
  }
  return {
    name: "pinia-auto-refs"
  };
}
export {
  src_default as default
};
