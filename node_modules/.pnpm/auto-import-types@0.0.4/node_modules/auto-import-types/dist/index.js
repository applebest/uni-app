"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};

// src/index.ts
var _fs = require('fs');
var _path = require('path'); var _path2 = _interopRequireDefault(_path);
var defaultOptions = {
  dtsDir: "src/@types",
  filepath: ".eslintrc-auto-import-types.json",
  globalsPropValue: true
};
function src_default(options = {}) {
  options = __spreadValues(__spreadValues({}, defaultOptions), options);
  const { dtsDir, filepath, globalsPropValue } = options;
  const dirPath = _path.resolve.call(void 0, process.cwd(), dtsDir);
  async function generateConfigFiles() {
    const filesPath = await _fs.promises.readdir(dirPath);
    const eslintConfigs = { globals: {} };
    const dtsArr = [];
    for (const filePath of filesPath) {
      const file = await _fs.promises.readFile(dirPath + _path2.default.sep + filePath, "utf-8");
      const dts = file.match(/(?<=declare (namespace|type|interface) )[a-zA-Z0-9]*/g);
      if (Array.isArray(dts)) {
        dtsArr.push(...dts);
      }
    }
    for (const dts of dtsArr) {
      eslintConfigs.globals[dts] = globalsPropValue;
    }
    _fs.promises.writeFile(filepath, JSON.stringify(eslintConfigs, null, 2), "utf-8");
  }
  generateConfigFiles();
  return {
    name: "auto-import-types",
    handleHotUpdate(ctx) {
      if (ctx.file.includes(dtsDir)) {
        generateConfigFiles();
      }
    }
  };
}


exports.default = src_default;
